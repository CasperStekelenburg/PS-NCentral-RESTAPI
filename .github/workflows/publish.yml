name: Publish PowerShell Module

on:
  workflow_dispatch:

jobs:
  publish:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Required Module
      shell: pwsh
      run: |
        Install-Module -Name PowerShellGet -Force -Scope CurrentUser -AllowClobber

    - name: Publish to PowerShell Gallery
      shell: pwsh
      env:
        PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
      run: |
        # Find the module manifest (.psd1)
        $manifest = Get-ChildItem -Path . -Filter *.psd1 -Recurse | Select-Object -First 1

        if (-not $manifest) {
          Write-Error "Module manifest not found!"
          exit 1
        }

        # Get module name from manifest filename (assumes <ModuleName>.psd1)
        $moduleName = [IO.Path]::GetFileNameWithoutExtension($manifest.Name)
        $moduleSourceDir = $manifest.Directory.FullName

        Write-Host "Preparing module '$moduleName' from: $moduleSourceDir"

        # Create publish directory structure: .../publish/ModuleName/
        $publishDir = Join-Path -Path $env:RUNNER_TEMP -ChildPath "publish"
        $publishModuleDir = Join-Path -Path $publishDir -ChildPath $moduleName

        if (Test-Path $publishDir) {
          Remove-Item -Recurse -Force $publishDir
        }
        New-Item -ItemType Directory -Path $publishModuleDir -Force | Out-Null

        # Copy only necessary module files (.psd1, .psm1, etc.)
        Copy-Item -Path "$moduleSourceDir\*" -Destination $publishModuleDir -Recurse -Exclude '.git', '.vscode', '.github'

        # Confirm copied contents
        Write-Host "Contents of module folder:"
        Get-ChildItem -Path $publishModuleDir -Recurse | ForEach-Object { Write-Host $_.FullName }

        # Publish from the parent directory (i.e., path that contains the module folder)
        Publish-Module -Path "$publishDir\PS-NCentral-RESTAPI" -NuGetApiKey $env:PSGALLERY_API_KEY